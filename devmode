#!/bin/bash
# Devmode TUI (Esa Lintang 2025)
# Version: Runtime Sync (copy only when running, auto cleanup on stop)

CONFIG_DIR="$HOME/devmode/config"
SPCK_DIR="/sdcard/android/data/io.spck/files"
SPCK_NODE_DIR="/sdcard/android/data/io.spck.editor.node/files"
ACODE_DIR="/sdcard/acode"
mkdir -p "$CONFIG_DIR"

# Colors
red='\e[31m'; green='\e[32m'; bgreen='\e[1;32m'; yellow='\e[33m'; blue='\e[34m'; white='\e[37m'; b='\e[1;37m'; reset='\e[0m'

exec 3>&2 2>/dev/null

box_header() {
    local title="$1"
    echo -e "${blue}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${reset}"
    printf "${blue}‚îÇ${reset} ${yellow}%s${reset}\n" "$title"
    echo -e "${blue}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${reset}\n"
}

select_multiple() {
    local title="$1"; shift
    local -n items=$1
    local -n selected=$2
    local index=0
    local total=${#items[@]}

    draw() {
        clear
        box_header "$title"
        echo -e "${white}Use ‚Üë ‚Üì to navigate, Space to select, Enter to continue.${reset}\n"
        for i in "${!items[@]}"; do
            if [[ ${selected[$i]} == true ]]; then
                mark="${bgreen}‚úì${reset}"
            else
                mark="${b}‚Ä¢${reset}"
            fi
            if [[ $i -eq $index ]]; then
                echo -e " ${b} ‚Üí ${mark} ${yellow}${items[$i]}${reset}"
            else
                echo -e "   ${mark} ${white}${items[$i]}${reset}"
            fi
        done
    }

    draw
    while true; do
        IFS= read -rsn1 key 2>/dev/null || true
        if [[ $key == $'\x1b' ]]; then
            read -rsn2 key
            case "$key" in
                "[A") ((index--)); ((index < 0)) && index=$((total - 1)); draw ;;
                "[B") ((index++)); ((index >= total)) && index=0; draw ;;
            esac
        elif [[ $key == " " ]]; then
            selected[$index]=$([[ ${selected[$index]} == true ]] && echo false || echo true)
            draw
        elif [[ $key == "" ]]; then
            break
        fi
    done
}

select_one() {
    local title="$1"; shift
    local -n items=$1
    local -n chosen=$2
    local index=0
    local total=${#items[@]}

    draw() {
        clear
        box_header "$title"
        echo -e "${white}Use ‚Üë ‚Üì to navigate, Enter to select.${reset}\n"
        for i in "${!items[@]}"; do
            if [[ $i -eq $index ]]; then
                echo -e " ${b} ‚Üí ${yellow}${items[$i]}${reset}"
            else
                echo -e "   ${white}${items[$i]}${reset}"
            fi
        done
    }

    draw
    while true; do
        IFS= read -rsn1 key 2>/dev/null || true
        if [[ $key == $'\x1b' ]]; then
            read -rsn2 key
            case "$key" in
                "[A") ((index--)); ((index < 0)) && index=$((total - 1)); draw ;;
                "[B") ((index++)); ((index >= total)) && index=0; draw ;;
            esac
        elif [[ $key == "" ]]; then
            chosen="${items[$index]}"
            break
        fi
    done
}

FILTER_LIST=(
  "node_modules"
  ".git"
  "dist"
  "build"
  "out"
  "vendor"
  ".vscode"
  "__pycache__"
  "*.lock"
  "*.log"
  "*.egg-info"
  "*.dist-info"
)

create_filter_file() {
    local f="$HOME/.devmode_filter"
    echo "# rsync filter" > "$f"
    for pattern in "${FILTER_LIST[@]}"; do
        echo "- $pattern" >> "$f"
        echo "- $pattern/**" >> "$f"
    done
    echo "+ *" >> "$f"
    echo "$f"
}

set_workspace() {
    clear
    box_header "üõ†Ô∏è Create New Workspace"

    echo -e "${blue}üîç Scanning current directory...${reset}"
    files=($(ls))
    declare -a selected_flags

    select_multiple "üì¶ Select files/folders to include" files selected_flags

    chosen_items=()
    for i in "${!files[@]}"; do
        if [[ ${selected_flags[$i]} == true ]]; then
            chosen_items+=("${files[$i]}")
        fi
    done

    if [ ${#chosen_items[@]} -eq 0 ]; then
        echo -e "${red}‚ö†Ô∏è  No files selected.${reset}"
        return
    fi

    read -p "üìù Enter workspace name: " name

    editors=("SPCK" "SPCK Node" "Acode")
    select_one "üé® Choose editor for this workspace" editors chosen_editor

    case "$chosen_editor" in
        "SPCK") editor_dir="$SPCK_DIR" ;;
        "SPCK Node") editor_dir="$SPCK_NODE_DIR" ;;
        "Acode") editor_dir="$ACODE_DIR" ;;
    esac

    cat > "$CONFIG_DIR/$name.json" <<EOF
{
  "path": "$(pwd)",
  "editor": "$chosen_editor",
  "editor_dir": "$editor_dir",
  "name": "$name",
  "files": [$(printf '"%s",' "${chosen_items[@]}" | sed 's/,$//')]
}
EOF

    echo -e "${green}‚úÖ Workspace '$name' saved. Run it with:${reset}"
    echo -e "   ${blue}devmode run${reset}"
}

run_workspace() {
    clear
    box_header "üöÄ Run Workspace"

    files=("$CONFIG_DIR"/*.json)
    [ ${#files[@]} -eq 0 ] && echo -e "${red}‚ö†Ô∏è  No workspace found.${reset}" && return

    options=()
    for f in "${files[@]}"; do
        options+=("$(basename "$f" .json)")
    done

    select_one "üìÇ Choose a workspace to run" options chosen

    CONFIG_PATH="$CONFIG_DIR/$chosen.json"
    workspace=$(jq -r '.path' "$CONFIG_PATH")
    editor_dir=$(jq -r '.editor_dir' "$CONFIG_PATH")
    name=$(jq -r '.name' "$CONFIG_PATH")
    target_dir="$editor_dir/$name"

    echo -e "${green}üìÇ Active Sync: ${yellow}$chosen${reset}"
    echo "Project : $workspace"
    echo "Editor  : $target_dir"
    sleep 1

    filter_file=$(create_filter_file)
    mkdir -p "$target_dir"

    echo -e "\n${blue}üìÅ Copying initial files to editor...${reset}"
    files_list=$(jq -r '.files[]' "$CONFIG_PATH")
    for item in $files_list; do
        if [ -e "$workspace/$item" ]; then
            rsync -rt --checksum --filter="merge $filter_file" "$workspace/$item" "$target_dir/"
        fi
    done
    echo -e "${green}‚úÖ Copy complete. Syncing every 1 second...${reset}"

    cleanup() {
        echo -e "\nüßπ Stopping sync and cleaning up editor folder..."
        rm -rf "$target_dir"
        rm -f "$filter_file"
        echo -e "${yellow}‚úÖ Workspace '$chosen' closed.${reset}"
        exit 0
    }
    trap cleanup INT

    while true; do
        rsync -rt --checksum --filter="merge $filter_file" "$target_dir/" "$workspace/" 2>/dev/null
        sleep 1
    done
}

remove_workspace() {
    clear
    box_header "üóëÔ∏è Remove Workspace"

    files=("$CONFIG_DIR"/*.json)
    [ ${#files[@]} -eq 0 ] && echo -e "${red}‚ö†Ô∏è  No workspace to remove.${reset}" && return

    options=()
    for f in "${files[@]}"; do
        options+=("$(basename "$f" .json)")
    done

    declare -a sel
    select_multiple "Select workspace(s) to delete" options sel

    for i in "${!options[@]}"; do
        if [[ ${sel[$i]} == true ]]; then
            rm -f "$CONFIG_DIR/${options[$i]}.json"
            echo -e "${red}üóëÔ∏è  Workspace '${options[$i]}' removed.${reset}"
        fi
    done
}

show_help() {
    box_header "üìò Devmode CLI Help"
    echo -e "${blue}Usage:${reset}"
    echo "  devmode set    ‚Üí Save a new workspace configuration"
    echo "  devmode run    ‚Üí Copy and start real-time sync"
    echo "  devmode rm     ‚Üí Delete saved workspace(s)"
    echo "  devmode help   ‚Üí Show this help menu"
}

case "$1" in
    create-new-workspace|set) set_workspace ;;
    start-workspace|run) run_workspace ;;
    remove-workspace|rm) remove_workspace ;;
    help|"") show_help ;;
    *) echo -e "${red}Unknown command. Use 'devmode help'.${reset}" ;;
esac
