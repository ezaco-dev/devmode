#!/bin/bash
# Devmode TUI (Esa Lintang 2025)
# Versi: Runtime Sync (copy hanya saat run, auto cleanup di stop)

CONFIG_DIR="$HOME/devmode/config"
SPCK_DIR="/sdcard/android/data/io.spck/files"
SPCK_NODE_DIR="/sdcard/android/data/io.spck.editor.node/files"
ACODE_DIR="/sdcard/acode"
mkdir -p "$CONFIG_DIR"

# Warna
red='\e[31m'; green='\e[32m'; yellow='\e[33m'; blue='\e[34m'; white='\e[37m'; reset='\e[0m'

# ==========================================================
# Fungsi navigasi (multi select)
# ==========================================================
select_multiple() {
    local title="$1"; shift
    local -n items=$1
    local -n selected=$2
    local index=0
    local total=${#items[@]}

    draw() {
        clear
        echo -e "\n${blue}${title}${reset}\n"
        echo -e "${white}Gunakan ‚Üë ‚Üì untuk navigasi, Spasi untuk pilih, Enter untuk lanjut.${reset}\n"
        for i in "${!items[@]}"; do
            if [[ ${selected[$i]} == true ]]; then
                mark="[${green}x${reset}]"
            else
                mark="[ ]"
            fi
            if [[ $i -eq $index ]]; then
                echo -e " > ${mark} ${yellow}${items[$i]}${reset}"
            else
                echo -e "   ${mark} ${white}${items[$i]}${reset}"
            fi
        done
    }

    draw
    while true; do
        IFS= read -rsn1 key
        if [[ $key == $'\x1b' ]]; then
            read -rsn2 key
            case "$key" in
                "[A") ((index--)); ((index < 0)) && index=$((total - 1)); draw ;;
                "[B") ((index++)); ((index >= total)) && index=0; draw ;;
            esac
        elif [[ $key == " " ]]; then
            selected[$index]=$([[ ${selected[$index]} == true ]] && echo false || echo true)
            draw
        elif [[ $key == "" ]]; then
            break
        fi
    done
}

# ==========================================================
# Fungsi navigasi (single select)
# ==========================================================
select_one() {
    local title="$1"; shift
    local -n items=$1
    local -n chosen=$2
    local index=0
    local total=${#items[@]}

    draw() {
        clear
        echo -e "\n${blue}${title}${reset}\n"
        echo -e "${white}Gunakan ‚Üë ‚Üì untuk navigasi, Enter untuk pilih.${reset}\n"
        for i in "${!items[@]}"; do
            if [[ $i -eq $index ]]; then
                echo -e " > ${yellow}${items[$i]}${reset}"
            else
                echo -e "   ${white}${items[$i]}${reset}"
            fi
        done
    }

    draw
    while true; do
        IFS= read -rsn1 key
        if [[ $key == $'\x1b' ]]; then
            read -rsn2 key
            case "$key" in
                "[A") ((index--)); ((index < 0)) && index=$((total - 1)); draw ;;
                "[B") ((index++)); ((index >= total)) && index=0; draw ;;
            esac
        elif [[ $key == "" ]]; then
            chosen="${items[$index]}"
            break
        fi
    done
}

# ==========================================================
# Filter list (skip folder besar)
# ==========================================================
FILTER_LIST=(
  "node_modules"
  ".git"
  "dist"
  "build"
  "out"
  "vendor"
  ".vscode"
  "__pycache__"
  "*.lock"
  "*.log"
  "*.egg-info"
  "*.dist-info"
)

create_filter_file() {
    local f="$HOME/.devmode_filter"
    echo "# rsync filter" > "$f"
    for pattern in "${FILTER_LIST[@]}"; do
        echo "- $pattern" >> "$f"
        echo "- $pattern/**" >> "$f"
    done
    echo "+ *" >> "$f"
    echo "$f"
}

# ==========================================================
# Membuat workspace (tanpa copy file)
# ==========================================================
set_workspace() {
    echo -e "\n=========================================================="
    echo -e "üõ†Ô∏è ${yellow}Membuat Workspace Baru${reset}"
    echo -e "==========================================================\n"

    echo -e "${blue}üîç Scanning direktori saat ini...${reset}"
    files=($(ls))
    declare -a selected_flags

    select_multiple "üì¶ Pilih file/folder yang ingin disertakan:" files selected_flags

    chosen_items=()
    for i in "${!files[@]}"; do
        if [[ ${selected_flags[$i]} == true ]]; then
            chosen_items+=("${files[$i]}")
        fi
    done

    if [ ${#chosen_items[@]} -eq 0 ]; then
        echo "‚ö†Ô∏è Tidak ada file yang dipilih."
        return
    fi

    read -p "üìù Masukkan nama workspace: " name

    editors=("SPCK" "SPCK Node" "Acode")
    select_one "üé® Pilih editor untuk workspace ini:" editors chosen_editor

    case "$chosen_editor" in
        "SPCK") editor_dir="$SPCK_DIR" ;;
        "SPCK Node") editor_dir="$SPCK_NODE_DIR" ;;
        "Acode") editor_dir="$ACODE_DIR" ;;
    esac

    cat > "$CONFIG_DIR/$name.json" <<EOF
{
  "path": "$(pwd)",
  "editor": "$chosen_editor",
  "editor_dir": "$editor_dir",
  "name": "$name",
  "files": [$(printf '"%s",' "${chosen_items[@]}" | sed 's/,$//')]
}
EOF

    echo -e "${green}‚úÖ Workspace '$name' tersimpan. Jalankan dengan:${reset}"
    echo -e "   ${blue}devmode run${reset}"
}

# ==========================================================
# Menjalankan workspace (copy saat run, auto cleanup)
# ==========================================================
run_workspace() {
    echo -e "\n=========================================================="
    echo -e "üöÄ ${yellow}Menjalankan Workspace${reset}"
    echo -e "==========================================================\n"

    files=("$CONFIG_DIR"/*.json)
    [ ${#files[@]} -eq 0 ] && echo "‚ö†Ô∏è Belum ada workspace tersimpan." && return

    options=()
    for f in "${files[@]}"; do
        options+=("$(basename "$f" .json)")
    done

    select_one "üìÇ Pilih workspace yang ingin dijalankan:" options chosen

    CONFIG_PATH="$CONFIG_DIR/$chosen.json"
    workspace=$(jq -r '.path' "$CONFIG_PATH")
    editor_dir=$(jq -r '.editor_dir' "$CONFIG_PATH")
    name=$(jq -r '.name' "$CONFIG_PATH")
    target_dir="$editor_dir/$name"

    echo -e "${green}üìÇ Sinkronisasi aktif: ${yellow}$chosen${reset}"
    echo "Project : $workspace"
    echo "Editor  : $target_dir"
    sleep 1

    filter_file=$(create_filter_file)
    mkdir -p "$target_dir"

    echo -e "\n${blue}üìÅ Menyalin file awal ke editor...${reset}"
    files_list=$(jq -r '.files[]' "$CONFIG_PATH")
    for item in $files_list; do
        if [ -e "$workspace/$item" ]; then
            rsync -rt --checksum --filter="merge $filter_file" "$workspace/$item" "$target_dir/"
        fi
    done
    echo -e "${green}‚úÖ Copy selesai. Sinkronisasi berjalan setiap 1 detik...${reset}"

    cleanup() {
        echo -e "\nüõë Menutup sinkronisasi dan menghapus folder editor..."
        rm -rf "$target_dir"
        rm -f "$filter_file"
        echo -e "${yellow}‚úÖ Workspace '$chosen' ditutup.${reset}"
        exit 0
    }
    trap cleanup INT

    while true; do
        rsync -rt --checksum --filter="merge $filter_file" "$target_dir/" "$workspace/" 2>/dev/null
        sleep 1
    done
}

# ==========================================================
# Menghapus workspace
# ==========================================================
remove_workspace() {
    echo -e "\n=========================================================="
    echo -e "üóëÔ∏è ${red}Menghapus Workspace${reset}"
    echo -e "==========================================================\n"

    files=("$CONFIG_DIR"/*.json)
    [ ${#files[@]} -eq 0 ] && echo "‚ö†Ô∏è Tidak ada workspace untuk dihapus." && return

    options=()
    for f in "${files[@]}"; do
        options+=("$(basename "$f" .json)")
    done

    declare -a sel
    select_multiple "Pilih workspace yang ingin dihapus:" options sel

    for i in "${!options[@]}"; do
        if [[ ${sel[$i]} == true ]]; then
            rm -f "$CONFIG_DIR/${options[$i]}.json"
            echo -e "${red}üóëÔ∏è Workspace '${options[$i]}' dihapus.${reset}"
        fi
    done
}

# ==========================================================
# Bantuan
# ==========================================================
show_help() {
    echo -e "\n${yellow}Devmode CLI${reset} ‚Äî Pengelola Workspace Termux untuk SPCK/Acode"
    echo -e "${blue}Penggunaan:${reset}"
    echo "  devmode set    ‚Üí Menyimpan konfigurasi workspace"
    echo "  devmode run    ‚Üí Menyalin dan menjalankan sinkronisasi"
    echo "  devmode rm     ‚Üí Menghapus workspace"
    echo "  devmode help   ‚Üí Menampilkan bantuan"
}

# ==========================================================
# Routing
# ==========================================================
case "$1" in
    set) set_workspace ;;
    run) run_workspace ;;
    rm) remove_workspace ;;
    help|"") show_help ;;
    *) echo -e "${red}Perintah tidak dikenal. Gunakan 'devmode help'.${reset}" ;;
esac
